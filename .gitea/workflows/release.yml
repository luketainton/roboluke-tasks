name: Release
on:
  schedule:
    - cron: "0 9 * * 0"
  issue_comment:
    types: [created]

jobs:
  manual_trigger:
    name: Manual Trigger Cleanup
    runs-on: ubuntu-latest
    if: ${{ gitea.event_name == 'issue_comment' }}
    steps:
      - name: Log event metadata
        run: |
          echo "Issue: ${{ gitea.event.issue.number }}"
          echo "Comment: ${{ gitea.event.comment.body }}"
          echo "User: ${{ gitea.event.comment.user.login }}"

      - name: Stop workflow if required conditions are not met
        if: ${{ !contains(gitea.event.issue.number, '329') || !contains(gitea.event.comment.body, '/trigger-release') || !contains(gitea.event.comment.user.login, 'luke') }}
        run: exit 1

      - name: Delete issue comment
        run: |
          curl -X DELETE \
            -H "Authorization: token ${{ gitea.token }}" \
            "${{ gitea.server_url }}/api/v1/repos/${{ gitea.repository }}/issues/comments/${{ gitea.event.comment.id }}"

  # test:
  #   name: Unit Test
  #   uses: https://git.tainton.uk/public/webexmemebot/.gitea/workflows/ci.yml@main
  #   continue-on-error: true

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    # needs: test
    outputs:
      release_name: ${{ steps.get_next_version.outputs.tag }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Changes since last tag
        id: changes
        run: |
          rm -f .changes
          git log $(git describe --tags --abbrev=0)..HEAD --no-merges --oneline >> .changes
          cat .changes

      - name: Check for changes
        run: |
          if [[ -z $(grep '[^[:space:]]' .changes) ]] ; then
            echo "changes=false"
            echo "changes=false" >> "$GITEA_OUTPUT"
          else
            echo "changes=true"
            echo "changes=true" >> "$GITEA_OUTPUT"
          fi

      - name: Cancel if no changes
        if: steps.changes.outputs.changes == 'false'
        run: exit 1

      - name: Set server URL
        id: set_srvurl
        run: |
          SRVURL=$(echo "${{ gitea.server_url }}" | sed 's/https:\/\/\(.*\)/\1/')
          echo "srvurl=$SRVURL" >> "$GITEA_OUTPUT"

      - name: Get next version
        uses: TriPSs/conventional-changelog-action@v6
        id: get_next_version
        with:
          git-url: ${{ steps.set_srvurl.outputs.srvurl }}
          github-token: ${{ gitea.token }}
          preset: "conventionalcommits"
          # preset: "angular"  # This is the default
          skip-commit: true
          release-count: 1
          output-file: false
          create-summary: true
          skip-on-empty: true
          skip-version-file: true
          skip-tag: true

      - name: Create release
        run: |
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.ACTIONS_TOKEN }}" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            -d "{\"tag_name\": \"${{ steps.get_next_version.outputs.tag }}\", \"name\": \"${{ steps.get_next_version.outputs.tag }}\", \"body\": \"${{ steps.get_next_version.outputs.changelog }}\"}" \
            "${{ gitea.server_url }}/api/v1/repos/${{ gitea.repository }}/releases"

  build_docker:
    name: Build Docker Images
    needs: create_release
    steps:
      - name: Update Docker configuration
        continue-on-error: true
        run: |
          mkdir -p /etc/default
          mkdir -p /etc/docker
          touch -a /etc/default/docker
          touch -a /etc/docker/daemon.json
          echo "DOCKER_OPTS=\"--insecure-registry ${{ vars.PACKAGES_REGISTRY_URL }}\"" >> /etc/default/docker
          echo "{\"insecure-registries\": [\"${{ vars.PACKAGES_REGISTRY_URL }}\"]}" > /etc/docker/daemon.json

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.create_release.outputs.release_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Gitea Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.PACKAGES_REGISTRY_URL }}
          username: ${{ vars.ACTIONS_USERNAME }}
          password: ${{ secrets.ACTIONS_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ vars.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ vars.GHCR_USERNAME }}/webexmemebot
            ${{ vars.PACKAGES_REGISTRY_URL }}/${{ gitea.repository }}
          tags: type=semver,pattern=v{{version}},value=${{ needs.create_release.outputs.release_name }}

      - name: Print metadata
        run: |
          printf "Annotations:\n${{ steps.meta.outputs.annotations }}"
          echo ""
          printf "Labels:\n${{ steps.meta.outputs.labels }}"
          echo ""
          printf "Tags:\n${{ steps.meta.outputs.tags }}"

      - name: Build images
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Push images
        run: |
          strtags="${{ steps.meta.outputs.tags }}"
          readarray -t lines <<<"$strtags"
          for element in "${lines[@]}"; do docker push "$element"; done
          unset strtags lines
